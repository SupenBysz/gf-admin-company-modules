// ================================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// You can delete these comments if you wish manually maintain this interface file.
// ================================================================================

package co_service

import (
	"context"

	"github.com/SupenBysz/gf-admin-company-modules/co_model"
	"github.com/SupenBysz/gf-admin-company-modules/co_model/co_entity"
	"github.com/SupenBysz/gf-admin-company-modules/co_model/co_enum"
	"github.com/SupenBysz/gf-admin-company-modules/co_model/co_hook"
	"github.com/kysion/base-library/base_model"
)

type (
	IAudit interface {
		InstallHook(state co_enum.AuditEvent, category int, hookFunc co_hook.AuditHookFunc) int64
		UnInstallHook(savedHookId int64)
		CleanAllHook()
		QueryAuditList(ctx context.Context, filter *base_model.SearchParams) (*co_model.AuditListRes, error)
		GetAuditById(ctx context.Context, id int64) *co_entity.Audit
		GetAuditByLatestUnionMainId(ctx context.Context, unionMainId int64) *co_entity.Audit
		CreateAudit(ctx context.Context, info co_model.CreateAudit) (*co_entity.Audit, error)
		UpdateAudit(ctx context.Context, id int64, state int, reply string, auditUserId int64) (bool, error)
	}
)

var (
	localAudit IAudit
)

func Audit() IAudit {
	if localAudit == nil {
		panic("implement not found for interface IAudit, forgot register?")
	}
	return localAudit
}

func RegisterAudit(i IAudit) {
	localAudit = i
}
