// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// FdRechargeDao is the data access object for table co_fd_recharge.
type FdRechargeDao struct {
	dao_interface.IDao
	table       string            // table is the underlying table name of the DAO.
	group       string            // group is the database configuration group name of current DAO.
	columns     FdRechargeColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// FdRechargeColumns defines and stores column names for table co_fd_recharge.
type FdRechargeColumns struct {
	Id             string //
	UserId         string // 用户ID
	CurrencyCode   string // 币种
	Amount         string // 金额
	RechargeMethod string // 方式：1手动冲正、2银行卡、3支付宝、4微信、5云闪付、6翼支付
	RechargeTime   string // 充值时间
	Status         string // 状态:0待处理、1已完成、2已取消、4失败
	PaymentOrderId string // 外部支付订单，即一般为第三方支付平台生成的订单号
	BillsId        string // 交易流水号，一般用于后续的队长和查询
	AuditState     string // 审核状态：0待审核，1通过、2不通过
	Remark         string // 备注
	CreatedAt      string //
	UpdatedAt      string //
	DeletedAt      string //
}

// fdRechargeColumns holds the columns for table co_fd_recharge.
var fdRechargeColumns = FdRechargeColumns{
	Id:             "id",
	UserId:         "user_id",
	CurrencyCode:   "currency_code",
	Amount:         "amount",
	RechargeMethod: "recharge_method",
	RechargeTime:   "recharge_time",
	Status:         "status",
	PaymentOrderId: "payment_order_id",
	BillsId:        "bills_id",
	AuditState:     "audit_state",
	Remark:         "remark",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

// NewFdRechargeDao creates and returns a new DAO object for table data access.
func NewFdRechargeDao(proxy ...dao_interface.IDao) *FdRechargeDao {
	var dao *FdRechargeDao
	if len(proxy) > 0 {
		dao = &FdRechargeDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     fdRechargeColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &FdRechargeDao{
		group:   "default",
		table:   "co_fd_recharge",
		columns: fdRechargeColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *FdRechargeDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *FdRechargeDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *FdRechargeDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *FdRechargeDao) Columns() FdRechargeColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *FdRechargeDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *FdRechargeDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *FdRechargeDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *FdRechargeDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *FdRechargeDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *FdRechargeDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *FdRechargeDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
