// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// FdRechargeDao is the data access object for table co_fd_recharge.
type FdRechargeDao struct {
	dao_interface.IDao
	table       string            // table is the underlying table name of the DAO.
	group       string            // group is the database configuration group name of current DAO.
	columns     FdRechargeColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// FdRechargeColumns defines and stores column names for table co_fd_recharge.
type FdRechargeColumns struct {
	Id             string // 唯一标识每一条充值记录
	UserId         string // 用户ID，关联用户表主键，用于标识充值所属用户
	Username       string // 用户账号，冗余存储方便快速查询用户相关充值记录，无需每次都关联用户表
	CurrencyCode   string // 货币代码，如CNY（人民币）、USD（美元）等
	Amount         string // 充值金额，小数点后保留2位，且金额需大于0
	RechargeMethod string // 充值方式：1 - 银行卡；2 - 支付宝；3 - 微信；4 - 云闪付；5 - ApplePay；6 - PayPal；7 - AmazonPay；8 - 线下现金（若有对应业务）；9 - 区块链钱包；100 - 其他（可进一步在备注说明）
	PaymentAt      string // 充值支付时间，记录用户实际支付成功的时间
	PaymentOrderNo string // 外部支付订单号，第三方支付平台生成的订单编号
	TransactionNo  string // 交易流水号，系统内部生成，用于后续对账和查询
	State          string // 充值状态：0 - 待处理；1 - 处理中；2 - 已支付；3 - 部分成功；4 - 失败；5 - 已取消；6 - 待确认
	AuditState     string // 审核状态：0 - 待审核；1 - 审核通过；2 - 审核不通过；3 - 审核中（人工复审）；4 - 补充资料待审核
	AuditReply     string // 审核意见，审核人员填写审核通过或不通过的原因等
	IpAddress      string // 用户发起充值请求时的IP地址
	UserAgent      string // 用户使用的设备和浏览器信息
	UnionMainId    string //
	AccountId      string // 财务账户
	Remark         string // 备注，可记录一些特殊情况或额外信息
	ScreenshotId   string // 充值截图
	CreatedAt      string // 记录创建时间，即充值请求提交时间
	UpdatedAt      string // 记录最后更新时间，每次记录状态等信息变更时更新
	DeletedAt      string // 逻辑删除时间，用于软删除，非真正物理删除，便于数据追溯和恢复
}

// fdRechargeColumns holds the columns for table co_fd_recharge.
var fdRechargeColumns = FdRechargeColumns{
	Id:             "id",
	UserId:         "user_id",
	Username:       "username",
	CurrencyCode:   "currency_code",
	Amount:         "amount",
	RechargeMethod: "recharge_method",
	PaymentAt:      "payment_at",
	PaymentOrderNo: "payment_order_no",
	TransactionNo:  "transaction_no",
	State:          "state",
	AuditState:     "audit_state",
	AuditReply:     "audit_reply",
	IpAddress:      "ip_address",
	UserAgent:      "user_agent",
	UnionMainId:    "union_main_id",
	AccountId:      "account_id",
	Remark:         "remark",
	ScreenshotId:   "screenshot_id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

// NewFdRechargeDao creates and returns a new DAO object for table data access.
func NewFdRechargeDao(proxy ...dao_interface.IDao) *FdRechargeDao {
	var dao *FdRechargeDao
	if len(proxy) > 0 {
		dao = &FdRechargeDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     fdRechargeColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &FdRechargeDao{
		group:   "default",
		table:   "co_fd_recharge",
		columns: fdRechargeColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *FdRechargeDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *FdRechargeDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *FdRechargeDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *FdRechargeDao) Columns() FdRechargeColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *FdRechargeDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *FdRechargeDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *FdRechargeDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *FdRechargeDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *FdRechargeDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *FdRechargeDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *FdRechargeDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
