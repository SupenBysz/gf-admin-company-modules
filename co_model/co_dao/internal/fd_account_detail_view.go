// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// FdAccountDetailViewDao is the data access object for table co_fd_account_detail_view.
type FdAccountDetailViewDao struct {
	dao_interface.IDao
	table       string                     // table is the underlying table name of the DAO.
	group       string                     // group is the database configuration group name of current DAO.
	columns     FdAccountDetailViewColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// FdAccountDetailViewColumns defines and stores column names for table co_fd_account_detail_view.
type FdAccountDetailViewColumns struct {
	Id                string //
	TodayAccountSum   string //
	TodayUpdatedAt    string //
	WeekAccountSum    string //
	WeekUpdatedAt     string //
	MonthAccountSum   string //
	MonthUpdatedAt    string //
	QuarterAccountSum string //
	QuarterUpdatedAt  string //
	YearAccountSum    string //
	YearUpdatedAt     string //
	UnionMainId       string //
	SysUserId         string //
	Version           string //
	SceneType         string //
	CompanyType       string //
}

// fdAccountDetailViewColumns holds the columns for table co_fd_account_detail_view.
var fdAccountDetailViewColumns = FdAccountDetailViewColumns{
	Id:                "id",
	TodayAccountSum:   "today_account_sum",
	TodayUpdatedAt:    "today_updated_at",
	WeekAccountSum:    "week_account_sum",
	WeekUpdatedAt:     "week_updated_at",
	MonthAccountSum:   "month_account_sum",
	MonthUpdatedAt:    "month_updated_at",
	QuarterAccountSum: "quarter_account_sum",
	QuarterUpdatedAt:  "quarter_updated_at",
	YearAccountSum:    "year_account_sum",
	YearUpdatedAt:     "year_updated_at",
	UnionMainId:       "union_main_id",
	SysUserId:         "sys_user_id",
	Version:           "version",
	SceneType:         "scene_type",
	CompanyType:       "company_type",
}

// NewFdAccountDetailViewDao creates and returns a new DAO object for table data access.
func NewFdAccountDetailViewDao(proxy ...dao_interface.IDao) *FdAccountDetailViewDao {
	var dao *FdAccountDetailViewDao
	if len(proxy) > 0 {
		dao = &FdAccountDetailViewDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     fdAccountDetailViewColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &FdAccountDetailViewDao{
		group:   "default",
		table:   "co_fd_account_detail_view",
		columns: fdAccountDetailViewColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *FdAccountDetailViewDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *FdAccountDetailViewDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *FdAccountDetailViewDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *FdAccountDetailViewDao) Columns() FdAccountDetailViewColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *FdAccountDetailViewDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *FdAccountDetailViewDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *FdAccountDetailViewDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *FdAccountDetailViewDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *FdAccountDetailViewDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *FdAccountDetailViewDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *FdAccountDetailViewDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
