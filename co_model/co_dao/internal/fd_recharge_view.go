// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// FdRechargeViewDao is the data access object for table co_fd_recharge_view.
type FdRechargeViewDao struct {
	dao_interface.IDao
	table       string                // table is the underlying table name of the DAO.
	group       string                // group is the database configuration group name of current DAO.
	columns     FdRechargeViewColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// FdRechargeViewColumns defines and stores column names for table co_fd_recharge_view.
type FdRechargeViewColumns struct {
	Id                string //
	UserId            string //
	Username          string //
	CurrencyCode      string //
	Amount            string //
	RechargeMethod    string //
	PaymentAt         string //
	PaymentOrderNo    string //
	TransactionNo     string //
	State             string //
	AuditState        string //
	AuditReply        string //
	IpAddress         string //
	UserAgent         string //
	UnionMainId       string //
	AccountId         string //
	Remark            string //
	ScreenshotId      string //
	CreatedAt         string //
	UpdatedAt         string //
	DeletedAt         string //
	AccountNumber     string //
	AccountName       string //
	AccountEnabled    string //
	AccountLimitState string //
	CompanyType       string //
}

// fdRechargeViewColumns holds the columns for table co_fd_recharge_view.
var fdRechargeViewColumns = FdRechargeViewColumns{
	Id:                "id",
	UserId:            "user_id",
	Username:          "username",
	CurrencyCode:      "currency_code",
	Amount:            "amount",
	RechargeMethod:    "recharge_method",
	PaymentAt:         "payment_at",
	PaymentOrderNo:    "payment_order_no",
	TransactionNo:     "transaction_no",
	State:             "state",
	AuditState:        "audit_state",
	AuditReply:        "audit_reply",
	IpAddress:         "ip_address",
	UserAgent:         "user_agent",
	UnionMainId:       "union_main_id",
	AccountId:         "account_id",
	Remark:            "remark",
	ScreenshotId:      "screenshot_id",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	DeletedAt:         "deleted_at",
	AccountNumber:     "account_number",
	AccountName:       "account_name",
	AccountEnabled:    "account_enabled",
	AccountLimitState: "account_limit_state",
	CompanyType:       "company_type",
}

// NewFdRechargeViewDao creates and returns a new DAO object for table data access.
func NewFdRechargeViewDao(proxy ...dao_interface.IDao) *FdRechargeViewDao {
	var dao *FdRechargeViewDao
	if len(proxy) > 0 {
		dao = &FdRechargeViewDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     fdRechargeViewColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &FdRechargeViewDao{
		group:   "default",
		table:   "co_fd_recharge_view",
		columns: fdRechargeViewColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *FdRechargeViewDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *FdRechargeViewDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *FdRechargeViewDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *FdRechargeViewDao) Columns() FdRechargeViewColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *FdRechargeViewDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *FdRechargeViewDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *FdRechargeViewDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *FdRechargeViewDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *FdRechargeViewDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *FdRechargeViewDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *FdRechargeViewDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
