// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// CompanyTeamMemberViewDao is the data access object for table co_company_team_member_view.
type CompanyTeamMemberViewDao struct {
	dao_interface.IDao
	table       string                       // table is the underlying table name of the DAO.
	group       string                       // group is the database configuration group name of current DAO.
	columns     CompanyTeamMemberViewColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// CompanyTeamMemberViewColumns defines and stores column names for table co_company_team_member_view.
type CompanyTeamMemberViewColumns struct {
	Id           string //
	TeamId       string //
	EmployeeId   string //
	InviteUserId string //
	UnionMainId  string //
	JoinAt       string //
	CompanyType  string //
}

// companyTeamMemberViewColumns holds the columns for table co_company_team_member_view.
var companyTeamMemberViewColumns = CompanyTeamMemberViewColumns{
	Id:           "id",
	TeamId:       "team_id",
	EmployeeId:   "employee_id",
	InviteUserId: "invite_user_id",
	UnionMainId:  "union_main_id",
	JoinAt:       "join_at",
	CompanyType:  "company_type",
}

// NewCompanyTeamMemberViewDao creates and returns a new DAO object for table data access.
func NewCompanyTeamMemberViewDao(proxy ...dao_interface.IDao) *CompanyTeamMemberViewDao {
	var dao *CompanyTeamMemberViewDao
	if len(proxy) > 0 {
		dao = &CompanyTeamMemberViewDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     companyTeamMemberViewColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &CompanyTeamMemberViewDao{
		group:   "default",
		table:   "co_company_team_member_view",
		columns: companyTeamMemberViewColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *CompanyTeamMemberViewDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *CompanyTeamMemberViewDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *CompanyTeamMemberViewDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *CompanyTeamMemberViewDao) Columns() CompanyTeamMemberViewColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *CompanyTeamMemberViewDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *CompanyTeamMemberViewDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *CompanyTeamMemberViewDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *CompanyTeamMemberViewDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *CompanyTeamMemberViewDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *CompanyTeamMemberViewDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *CompanyTeamMemberViewDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
