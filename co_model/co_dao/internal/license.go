// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// LicenseDao is the data access object for table co_license.
type LicenseDao struct {
	dao_interface.IDao
	table       string         // table is the underlying table name of the DAO.
	group       string         // group is the database configuration group name of current DAO.
	columns     LicenseColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// LicenseColumns defines and stores column names for table co_license.
type LicenseColumns struct {
	Id                         string //
	IdcardFrontPath            string // 身份证头像面照片
	IdcardBackPath             string // 身份证国徽面照片
	IdcardNo                   string // 身份证号
	IdcardExpiredDate          string // 身份证有效期
	IdcardAddress              string // 身份证户籍地址
	PersonContactName          string // 负责人，必须是自然人
	PersonContactMobile        string // 负责人，联系电话
	BusinessLicenseName        string // 公司全称
	BusinessLicenseAddress     string // 公司地址
	BusinessLicensePath        string // 营业执照图片地址
	BusinessLicenseScope       string // 经营范围
	BusinessLicenseRegCapital  string // 注册资本
	BusinessLicenseTermTime    string // 营业期限
	BusinessLicenseOrgCode     string // 组织机构代码
	BusinessLicenseCreditCode  string // 统一社会信用代码
	BusinessLicenseLegal       string // 法人
	BusinessLicenseLegalPath   string // 法人证照，如果法人不是自然人，则该项必填
	LatestAuditLogId           string // 最新的审核记录ID
	State                      string // 状态：0失效、1正常
	AuthType                   string // 认证类型：
	Remark                     string // 备注信息
	UpdatedAt                  string //
	CreatedAt                  string //
	DeletedAt                  string //
	BrandName                  string // 品牌名称
	BusinessLicenseLegalMobile string // 法人联系电话
	ServerMobile               string // 服务电话
	DoorPicturesJson           string // 门头照
}

// licenseColumns holds the columns for table co_license.
var licenseColumns = LicenseColumns{
	Id:                         "id",
	IdcardFrontPath:            "idcard_front_path",
	IdcardBackPath:             "idcard_back_path",
	IdcardNo:                   "idcard_no",
	IdcardExpiredDate:          "idcard_expired_date",
	IdcardAddress:              "idcard_address",
	PersonContactName:          "person_contact_name",
	PersonContactMobile:        "person_contact_mobile",
	BusinessLicenseName:        "business_license_name",
	BusinessLicenseAddress:     "business_license_address",
	BusinessLicensePath:        "business_license_path",
	BusinessLicenseScope:       "business_license_scope",
	BusinessLicenseRegCapital:  "business_license_reg_capital",
	BusinessLicenseTermTime:    "business_license_term_time",
	BusinessLicenseOrgCode:     "business_license_org_code",
	BusinessLicenseCreditCode:  "business_license_credit_code",
	BusinessLicenseLegal:       "business_license_legal",
	BusinessLicenseLegalPath:   "business_license_legal_path",
	LatestAuditLogId:           "latest_audit_log_id",
	State:                      "state",
	AuthType:                   "auth_type",
	Remark:                     "remark",
	UpdatedAt:                  "updated_at",
	CreatedAt:                  "created_at",
	DeletedAt:                  "deleted_at",
	BrandName:                  "brand_name",
	BusinessLicenseLegalMobile: "business_license_legal_mobile",
	ServerMobile:               "server_mobile",
	DoorPicturesJson:           "door_pictures_json",
}

// NewLicenseDao creates and returns a new DAO object for table data access.
func NewLicenseDao(proxy ...dao_interface.IDao) *LicenseDao {
	var dao *LicenseDao
	if len(proxy) > 0 {
		dao = &LicenseDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     licenseColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &LicenseDao{
		group:   "default",
		table:   "co_license",
		columns: licenseColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *LicenseDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *LicenseDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *LicenseDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *LicenseDao) Columns() LicenseColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *LicenseDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *LicenseDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *LicenseDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *LicenseDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *LicenseDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *LicenseDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *LicenseDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
