// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// FdAccountDetailDao is the data access object for table co_fd_account_detail.
type FdAccountDetailDao struct {
	table   string                 // table is the underlying table name of the DAO.
	group   string                 // group is the database configuration group name of current DAO.
	columns FdAccountDetailColumns // columns contains all the column names of Table for convenient usage.
}

// FdAccountDetailColumns defines and stores column names for table co_fd_account_detail.
type FdAccountDetailColumns struct {
	Id                string // 和财务账号 id保持一致
	TodayAccountSum   string // 今日金额
	TodayUpdatedAt    string // 今日金额更新时间
	WeekAccountSum    string // 本周金额
	WeekUpdatedAt     string // 本周金额更新时间
	MonthAccountSum   string // 本月金额
	MonthUpdatedAt    string // 本月金额更新时间
	QuarterAccountSum string // 本季度金额统计
	QuarterUpdatedAt  string // 本季度金额更新时间
	YearAccountSum    string // 本年度金额统计
	YearUpdatedAt     string // 本年度金额更新时间
	UnionMainId       string // 关联主体id
	SysUserId         string // 关联用户id
	Version           string // 乐观锁所需数据版本字段
	SceneType         string // 场景类型：0不限、1充电佣金收入
}

// fdAccountDetailColumns holds the columns for table co_fd_account_detail.
var fdAccountDetailColumns = FdAccountDetailColumns{
	Id:                "id",
	TodayAccountSum:   "today_account_sum",
	TodayUpdatedAt:    "today_updated_at",
	WeekAccountSum:    "week_account_sum",
	WeekUpdatedAt:     "week_updated_at",
	MonthAccountSum:   "month_account_sum",
	MonthUpdatedAt:    "month_updated_at",
	QuarterAccountSum: "quarter_account_sum",
	QuarterUpdatedAt:  "quarter_updated_at",
	YearAccountSum:    "year_account_sum",
	YearUpdatedAt:     "year_updated_at",
	UnionMainId:       "union_main_id",
	SysUserId:         "sys_user_id",
	Version:           "version",
	SceneType:         "scene_type",
}

// NewFdAccountDetailDao creates and returns a new DAO object for table data access.
func NewFdAccountDetailDao(proxy ...dao_interface.IDao) *FdAccountDetailDao {
	var dao *FdAccountDetailDao
	if len(proxy) > 0 {
		dao = &FdAccountDetailDao{
			group:   proxy[0].Group(),
			table:   proxy[0].Table(),
			columns: fdAccountDetailColumns,
		}
		return dao
	}

	return &FdAccountDetailDao{
		group:   "default",
		table:   "co_fd_account_detail",
		columns: fdAccountDetailColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *FdAccountDetailDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *FdAccountDetailDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *FdAccountDetailDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *FdAccountDetailDao) Columns() FdAccountDetailColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *FdAccountDetailDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *FdAccountDetailDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) dao_interface.DaoConfig {
	daoConfig := dao_interface.DaoConfig{
		Dao:   dao,
		DB:    dao.DB(),
		Table: dao.table,
		Group: dao.group,
		Model: dao.DB().Model(dao.Table()).Safe().Ctx(ctx),
	}

	if len(cacheOption) == 0 {
		daoConfig.CacheOption = daoctl.MakeDaoCache(dao.Table())
		daoConfig.Model = daoConfig.Model.Cache(*daoConfig.CacheOption)
	} else {
		if cacheOption[0] != nil {
			daoConfig.CacheOption = cacheOption[0]
			daoConfig.Model = daoConfig.Model.Cache(*daoConfig.CacheOption)
		}
	}

	daoConfig.Model = daoctl.RegisterDaoHook(daoConfig.Model)

	return daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *FdAccountDetailDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
