// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// FdCurrencyDao is the data access object for table co_fd_currency.
type FdCurrencyDao struct {
	dao_interface.IDao
	table       string            // table is the underlying table name of the DAO.
	group       string            // group is the database configuration group name of current DAO.
	columns     FdCurrencyColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// FdCurrencyColumns defines and stores column names for table co_fd_currency.
type FdCurrencyColumns struct {
	Code          string // 国家编码
	EnName        string // 国家英文名称
	CnName        string // 国家中文名称
	CurrencyCode  string // 货币编码
	CurrencyCn    string // 货币中文名称
	CurrencyEn    string // 货币英文名称
	Symbol        string // 货币符号
	SymbolNative  string // 货币原生符号
	IsLegalTender string // 是否法定货币：1是，0否
	CurrencyRate  string // 货币汇率，本币为人民币
}

// fdCurrencyColumns holds the columns for table co_fd_currency.
var fdCurrencyColumns = FdCurrencyColumns{
	Code:          "code",
	EnName:        "en_name",
	CnName:        "cn_name",
	CurrencyCode:  "currency_code",
	CurrencyCn:    "currency_cn",
	CurrencyEn:    "currency_en",
	Symbol:        "symbol",
	SymbolNative:  "symbol_native",
	IsLegalTender: "is_legal_tender",
	CurrencyRate:  "currency_rate",
}

// NewFdCurrencyDao creates and returns a new DAO object for table data access.
func NewFdCurrencyDao(proxy ...dao_interface.IDao) *FdCurrencyDao {
	var dao *FdCurrencyDao
	if len(proxy) > 0 {
		dao = &FdCurrencyDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     fdCurrencyColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &FdCurrencyDao{
		group:   "default",
		table:   "co_fd_currency",
		columns: fdCurrencyColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *FdCurrencyDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *FdCurrencyDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *FdCurrencyDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *FdCurrencyDao) Columns() FdCurrencyColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *FdCurrencyDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *FdCurrencyDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *FdCurrencyDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *FdCurrencyDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *FdCurrencyDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *FdCurrencyDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *FdCurrencyDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
