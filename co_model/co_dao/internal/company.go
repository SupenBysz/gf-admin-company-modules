// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// CompanyDao is the data access object for table co_company.
type CompanyDao struct {
	dao_interface.IDao
	table       string         // table is the underlying table name of the DAO.
	group       string         // group is the database configuration group name of current DAO.
	columns     CompanyColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// CompanyColumns defines and stores column names for table co_company.
type CompanyColumns struct {
	Id             string // ID
	Name           string // 名称
	ContactName    string // 商务联系人
	ContactMobile  string // 商务联系电话
	UserId         string // 管理员ID
	State          string // 状态：0未启用，1正常
	Remark         string // 备注
	CreatedBy      string // 创建者
	CreatedAt      string // 创建时间
	UpdatedBy      string // 更新者
	UpdatedAt      string // 更新时间
	DeletedBy      string // 删除者
	DeletedAt      string // 删除时间
	ParentId       string // 父级ID
	Address        string // 地址
	LicenseId      string // 主体资质id
	LicenseState   string // 主体状态,和主体资质状态保持一致
	LogoId         string // LOGO
	StartLevel     string // 服务星级
	CountryCode    string // 所属国家编码
	Region         string // 所属地区
	Score          string // 综合服务分
	CommissionRate string // 佣金率，如果开启会员权益模块，且佣金率有冲突，则该值优先级高会员权益模块；规则：该值不能大于上级佣金
}

// companyColumns holds the columns for table co_company.
var companyColumns = CompanyColumns{
	Id:             "id",
	Name:           "name",
	ContactName:    "contact_name",
	ContactMobile:  "contact_mobile",
	UserId:         "user_id",
	State:          "state",
	Remark:         "remark",
	CreatedBy:      "created_by",
	CreatedAt:      "created_at",
	UpdatedBy:      "updated_by",
	UpdatedAt:      "updated_at",
	DeletedBy:      "deleted_by",
	DeletedAt:      "deleted_at",
	ParentId:       "parent_id",
	Address:        "address",
	LicenseId:      "license_id",
	LicenseState:   "license_state",
	LogoId:         "logo_id",
	StartLevel:     "start_level",
	CountryCode:    "country_code",
	Region:         "region",
	Score:          "score",
	CommissionRate: "commission_rate",
}

// NewCompanyDao creates and returns a new DAO object for table data access.
func NewCompanyDao(proxy ...dao_interface.IDao) *CompanyDao {
	var dao *CompanyDao
	if len(proxy) > 0 {
		dao = &CompanyDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     companyColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &CompanyDao{
		group:   "default",
		table:   "co_company",
		columns: companyColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *CompanyDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *CompanyDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *CompanyDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *CompanyDao) Columns() CompanyColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *CompanyDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *CompanyDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *CompanyDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *CompanyDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *CompanyDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *CompanyDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *CompanyDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
