// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// FdBankCardViewDao is the data access object for table co_fd_bank_card_view.
type FdBankCardViewDao struct {
	dao_interface.IDao
	table       string                // table is the underlying table name of the DAO.
	group       string                // group is the database configuration group name of current DAO.
	columns     FdBankCardViewColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// FdBankCardViewColumns defines and stores column names for table co_fd_bank_card_view.
type FdBankCardViewColumns struct {
	Id            string //
	BankName      string //
	CardType      string //
	CardNumber    string //
	ExpiredAt     string //
	HolderName    string //
	BankOfAccount string //
	State         string //
	Remark        string //
	UserId        string //
	CreatedAt     string //
	CreatedBy     string //
	UpdatedAt     string //
	UpdatedBy     string //
	DeletedAt     string //
	DeletedBy     string //
	CompanyType   string //
}

// fdBankCardViewColumns holds the columns for table co_fd_bank_card_view.
var fdBankCardViewColumns = FdBankCardViewColumns{
	Id:            "id",
	BankName:      "bank_name",
	CardType:      "card_type",
	CardNumber:    "card_number",
	ExpiredAt:     "expired_at",
	HolderName:    "holder_name",
	BankOfAccount: "bank_of_account",
	State:         "state",
	Remark:        "remark",
	UserId:        "user_id",
	CreatedAt:     "created_at",
	CreatedBy:     "created_by",
	UpdatedAt:     "updated_at",
	UpdatedBy:     "updated_by",
	DeletedAt:     "deleted_at",
	DeletedBy:     "deleted_by",
	CompanyType:   "company_type",
}

// NewFdBankCardViewDao creates and returns a new DAO object for table data access.
func NewFdBankCardViewDao(proxy ...dao_interface.IDao) *FdBankCardViewDao {
	var dao *FdBankCardViewDao
	if len(proxy) > 0 {
		dao = &FdBankCardViewDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     fdBankCardViewColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &FdBankCardViewDao{
		group:   "default",
		table:   "co_fd_bank_card_view",
		columns: fdBankCardViewColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *FdBankCardViewDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *FdBankCardViewDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *FdBankCardViewDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *FdBankCardViewDao) Columns() FdBankCardViewColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *FdBankCardViewDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *FdBankCardViewDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *FdBankCardViewDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *FdBankCardViewDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *FdBankCardViewDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *FdBankCardViewDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *FdBankCardViewDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
