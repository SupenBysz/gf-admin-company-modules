// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// CompanyEmployeeDao is the data access object for table co_company_employee.
type CompanyEmployeeDao struct {
	dao_interface.IDao
	table       string                 // table is the underlying table name of the DAO.
	group       string                 // group is the database configuration group name of current DAO.
	columns     CompanyEmployeeColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// CompanyEmployeeColumns defines and stores column names for table co_company_employee.
type CompanyEmployeeColumns struct {
	Id             string // ID，保持与USERID一致
	No             string // 工号
	Avatar         string // 头像
	Name           string // 姓名
	Mobile         string // 手机号
	UnionMainId    string // 所属主体
	State          string // 状态： -1已离职，0待确认，1已入职
	LastActiveIp   string // 最后活跃IP
	HiredAt        string // 入职时间
	CreatedBy      string //
	CreatedAt      string //
	UpdatedBy      string //
	UpdatedAt      string //
	DeletedBy      string //
	DeletedAt      string //
	Sex            string // 性别：0未知、1男、2女
	Remark         string // 备注
	CountryCode    string // 所属国家编码
	Region         string // 所属地区
	Email          string // 业务邮箱
	WeixinAccount  string // 微信号
	Address        string // 地址
	WorkCardAvatar string // 工牌头像
	CommissionRate string // 佣金率，如果开启会员权益模块，且佣金率有冲突，则该值优先级高会员权益模块；规则：该值不能大于上级佣金
}

// companyEmployeeColumns holds the columns for table co_company_employee.
var companyEmployeeColumns = CompanyEmployeeColumns{
	Id:             "id",
	No:             "no",
	Avatar:         "avatar",
	Name:           "name",
	Mobile:         "mobile",
	UnionMainId:    "union_main_id",
	State:          "state",
	LastActiveIp:   "last_active_ip",
	HiredAt:        "hired_at",
	CreatedBy:      "created_by",
	CreatedAt:      "created_at",
	UpdatedBy:      "updated_by",
	UpdatedAt:      "updated_at",
	DeletedBy:      "deleted_by",
	DeletedAt:      "deleted_at",
	Sex:            "sex",
	Remark:         "remark",
	CountryCode:    "country_code",
	Region:         "region",
	Email:          "email",
	WeixinAccount:  "weixin_account",
	Address:        "address",
	WorkCardAvatar: "work_card_avatar",
	CommissionRate: "commission_rate",
}

// NewCompanyEmployeeDao creates and returns a new DAO object for table data access.
func NewCompanyEmployeeDao(proxy ...dao_interface.IDao) *CompanyEmployeeDao {
	var dao *CompanyEmployeeDao
	if len(proxy) > 0 {
		dao = &CompanyEmployeeDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     companyEmployeeColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &CompanyEmployeeDao{
		group:   "default",
		table:   "co_company_employee",
		columns: companyEmployeeColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *CompanyEmployeeDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *CompanyEmployeeDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *CompanyEmployeeDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *CompanyEmployeeDao) Columns() CompanyEmployeeColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *CompanyEmployeeDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *CompanyEmployeeDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *CompanyEmployeeDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *CompanyEmployeeDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *CompanyEmployeeDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *CompanyEmployeeDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *CompanyEmployeeDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
